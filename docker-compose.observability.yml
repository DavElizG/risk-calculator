version: '3.8'

services:
  # Backend API
  risk-calculator-backend:
    build:
      context: ./backend/risk-calculator-api/risk-calculator-api
      dockerfile: Dockerfile
    container_name: risk-calculator-backend
    ports:
      - "8080:80"
      - "8443:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      # OpenTelemetry configuration para dual export (local + cloud)
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      # Grafana Cloud configuration (for dual export)
      - GRAFANA_CLOUD_OTLP_ENDPOINT=https://otlp-gateway-prod-us-east-2.grafana.net/otlp
      - GRAFANA_CLOUD_OTLP_HEADERS=Authorization=Basic Z2xjX2V5SnZJam9pTVRVeE5qVTRNaUlzSW01SmRXNTJiaUVzSW10NmFXNHhOR0VzSW5ZaWFYQm9iakpGYW5SeU0yVktUV0ZzU25KVFRFNVVOVlF6VGpSelVXa3JZa3A1TjBSWGRVTkpNRGxaUzFOTWJTSXNJbTFpYVhSeVgzSjFiblJwYldVNmFYUTZleUpoWldWaFpqSTJPUzAyWm1abUxUUXhaRGd0T0dGbU15MW1OR1l3TWpOa05ETTVNMlU5Vm1sc1lYZ3lSSFl6YWsxM01sWmhOVmcwTWs0aWZYMCUzRA
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/RiskCalculator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - observability-network
    depends_on:
      - tempo
      - loki

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - observability-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources-complete.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    restart: unless-stopped
    networks:
      - observability-network
    depends_on:
      - prometheus
      - loki
      - tempo

  # Loki for logs
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - observability-network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./logs:/var/log/app:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - observability-network
    depends_on:
      - loki

  # Tempo for traces
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    ports:
      - "3200:3200"   # Tempo HTTP
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./monitoring/tempo-config.yml:/etc/tempo.yaml
      - tempo_data:/var/tempo
    restart: unless-stopped
    networks:
      - observability-network

  # Jaeger (mantener para compatibilidad)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP collector
      - "6831:6831/udp"  # Jaeger agent UDP
      - "6832:6832/udp"  # Jaeger agent binary thrift
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - observability-network
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  tempo_data:

networks:
  observability-network:
    driver: bridge
